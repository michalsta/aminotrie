#ifndef AMINOTRIE_FASTA_H
#define AMINOTRIE_FASTA_H

#include <cstdint>
#include <iostream>

#include <iostream>
#if 0
constexpr uint8_t M[256] = {
    /* 0-64: Non-relevant ASCII characters */
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,

    /* A-Z */
    255, 0, 255, 1, 2, 3, 4, 5, 6, 7, 255, 8, 9, 10, 11, 255, 12, 13, 14, 15, 
    16, 255, 17, 18, 255, 19, 255, 255, 255, 255, 255, 255,

    /* a-z (assuming case-insensitivity) */
    255, 0, 255, 1, 2, 3, 4, 5, 6, 7, 255, 8, 9, 10, 11, 255, 12, 13, 14, 15, 
    16, 255, 17, 18, 255, 19, 255, 255, 255, 255, 255, 255,

    /* 91-255: Non-relevant ASCII characters */
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
};
#endif
constexpr uint8_t AminoAcidsMap[256] = {
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 0,   255, 1,   2,   3,   4,   5,   6,   7,   255,
    8,   9,   10,  11,  255, 12,  13,  14,  15,  16,  255, 17,  18,  255, 19,
    255, 255, 255, 255, 255, 255, 255, 0,   255, 1,   2,   3,   4,   5,   6,
    7,   255, 8,   9,   10,  11,  255, 12,  13,  14,  15,  16,  255, 17,  18,
    255, 19,  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    255,
};

class SeqSet {
  const std::vector<std::vector<std::uint8_t>> sequences;
  const std::vector<std::string> identifiers;

public:
  SeqSet(std::vector<std::vector<std::uint8_t>> &&_sequences,
         std::vector<std::string> &&_identifiers)
      : sequences(std::move(_sequences)), identifiers(std::move(_identifiers)) {
    assert(sequences.size() == identifiers.size());
  };

  static SeqSet FromFASTA(const std::string &file_path);
};

#endif /* AMINOTRIE_FASTA_H */